// This code was autogenerated with `dbus-codegen-rust -m None -s -g -d org.ofono -p /quectelqmi_0 -f org.ofono.SimManager`, see https://github.com/diwic/dbus-rs
use dbus as dbus;
use dbus::arg;
use dbus::blocking;

pub trait OrgOfonoSimManager {
    fn get_properties(&self) -> Result<::std::collections::HashMap<String, arg::Variant<Box<dyn arg::RefArg + 'static>>>, dbus::Error>;
    fn set_property<I1: arg::Arg + arg::Append>(&self, property: &str, value: I1) -> Result<(), dbus::Error>;
    fn change_pin(&self, type_: &str, oldpin: &str, newpin: &str) -> Result<(), dbus::Error>;
    fn enter_pin(&self, type_: &str, pin: &str) -> Result<(), dbus::Error>;
    fn reset_pin(&self, type_: &str, puk: &str, newpin: &str) -> Result<(), dbus::Error>;
    fn lock_pin(&self, type_: &str, pin: &str) -> Result<(), dbus::Error>;
    fn unlock_pin(&self, type_: &str, pin: &str) -> Result<(), dbus::Error>;
    fn get_icon(&self, id: u8) -> Result<Vec<u8>, dbus::Error>;
}

impl<'a, C: ::std::ops::Deref<Target=blocking::Connection>> OrgOfonoSimManager for blocking::Proxy<'a, C> {

    fn get_properties(&self) -> Result<::std::collections::HashMap<String, arg::Variant<Box<dyn arg::RefArg + 'static>>>, dbus::Error> {
        self.method_call("org.ofono.SimManager", "GetProperties", ())
            .and_then(|r: (::std::collections::HashMap<String, arg::Variant<Box<dyn arg::RefArg + 'static>>>, )| Ok(r.0, ))
    }

    fn set_property<I1: arg::Arg + arg::Append>(&self, property: &str, value: I1) -> Result<(), dbus::Error> {
        self.method_call("org.ofono.SimManager", "SetProperty", (property, arg::Variant(value), ))
    }

    fn change_pin(&self, type_: &str, oldpin: &str, newpin: &str) -> Result<(), dbus::Error> {
        self.method_call("org.ofono.SimManager", "ChangePin", (type_, oldpin, newpin, ))
    }

    fn enter_pin(&self, type_: &str, pin: &str) -> Result<(), dbus::Error> {
        self.method_call("org.ofono.SimManager", "EnterPin", (type_, pin, ))
    }

    fn reset_pin(&self, type_: &str, puk: &str, newpin: &str) -> Result<(), dbus::Error> {
        self.method_call("org.ofono.SimManager", "ResetPin", (type_, puk, newpin, ))
    }

    fn lock_pin(&self, type_: &str, pin: &str) -> Result<(), dbus::Error> {
        self.method_call("org.ofono.SimManager", "LockPin", (type_, pin, ))
    }

    fn unlock_pin(&self, type_: &str, pin: &str) -> Result<(), dbus::Error> {
        self.method_call("org.ofono.SimManager", "UnlockPin", (type_, pin, ))
    }

    fn get_icon(&self, id: u8) -> Result<Vec<u8>, dbus::Error> {
        self.method_call("org.ofono.SimManager", "GetIcon", (id, ))
            .and_then(|r: (Vec<u8>, )| Ok(r.0, ))
    }
}

#[derive(Debug)]
pub struct OrgOfonoSimManagerPropertyChanged {
    pub name: String,
    pub value: arg::Variant<Box<dyn arg::RefArg + 'static>>,
}

impl arg::AppendAll for OrgOfonoSimManagerPropertyChanged {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.name, i);
        arg::RefArg::append(&self.value, i);
    }
}

impl arg::ReadAll for OrgOfonoSimManagerPropertyChanged {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(OrgOfonoSimManagerPropertyChanged {
            name: i.read()?,
            value: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for OrgOfonoSimManagerPropertyChanged {
    const NAME: &'static str = "PropertyChanged";
    const INTERFACE: &'static str = "org.ofono.SimManager";
}
