// This code was autogenerated with `dbus-codegen-rust -m None -s -g -d org.ofono -f org.ofono.Manager -p /`, see https://github.com/diwic/dbus-rs
use dbus as dbus;
use dbus::arg;
use dbus::blocking;

pub trait OrgOfonoManager {
    fn get_modems(&self) -> Result<Vec<(dbus::Path<'static>, ::std::collections::HashMap<String, arg::Variant<Box<dyn arg::RefArg + 'static>>>)>, dbus::Error>;
}

impl<'a, C: ::std::ops::Deref<Target=blocking::Connection>> OrgOfonoManager for blocking::Proxy<'a, C> {

    fn get_modems(&self) -> Result<Vec<(dbus::Path<'static>, ::std::collections::HashMap<String, arg::Variant<Box<dyn arg::RefArg + 'static>>>)>, dbus::Error> {
        self.method_call("org.ofono.Manager", "GetModems", ())
            .and_then(|r: (Vec<(dbus::Path<'static>, ::std::collections::HashMap<String, arg::Variant<Box<dyn arg::RefArg + 'static>>>)>, )| Ok(r.0, ))
    }
}

#[derive(Debug)]
pub struct OrgOfonoManagerModemAdded {
    pub path: dbus::Path<'static>,
    pub properties: ::std::collections::HashMap<String, arg::Variant<Box<dyn arg::RefArg + 'static>>>,
}

impl arg::AppendAll for OrgOfonoManagerModemAdded {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.path, i);
        arg::RefArg::append(&self.properties, i);
    }
}

impl arg::ReadAll for OrgOfonoManagerModemAdded {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(OrgOfonoManagerModemAdded {
            path: i.read()?,
            properties: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for OrgOfonoManagerModemAdded {
    const NAME: &'static str = "ModemAdded";
    const INTERFACE: &'static str = "org.ofono.Manager";
}

#[derive(Debug)]
pub struct OrgOfonoManagerModemRemoved {
    pub path: dbus::Path<'static>,
}

impl arg::AppendAll for OrgOfonoManagerModemRemoved {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.path, i);
    }
}

impl arg::ReadAll for OrgOfonoManagerModemRemoved {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(OrgOfonoManagerModemRemoved {
            path: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for OrgOfonoManagerModemRemoved {
    const NAME: &'static str = "ModemRemoved";
    const INTERFACE: &'static str = "org.ofono.Manager";
}
