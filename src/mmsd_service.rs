// This code was autogenerated with `dbus-codegen-rust -g -m None -p /org/ofono/mms/310260191720416`, see https://github.com/diwic/dbus-rs
use dbus as dbus;
use dbus::arg;
use dbus::blocking;

pub trait OrgFreedesktopDBusIntrospectable {
    fn introspect(&self) -> Result<String, dbus::Error>;
}

impl<'a, C: ::std::ops::Deref<Target=blocking::Connection>> OrgFreedesktopDBusIntrospectable for blocking::Proxy<'a, C> {

    fn introspect(&self) -> Result<String, dbus::Error> {
        self.method_call("org.freedesktop.DBus.Introspectable", "Introspect", ())
            .and_then(|r: (String, )| Ok(r.0, ))
    }
}

pub trait OrgOfonoMmsService {
    fn send_message(&self, recipients: Vec<&str>, smil: &str, attachments: Vec<(&str, &str, &str)>) -> Result<dbus::Path<'static>, dbus::Error>;
    fn get_messages(&self) -> Result<Vec<(dbus::Path<'static>, ::std::collections::HashMap<String, arg::Variant<Box<dyn arg::RefArg + 'static>>>)>, dbus::Error>;
    fn get_conversation(&self, number: &str, count: &str) -> Result<Vec<(dbus::Path<'static>, ::std::collections::HashMap<String, arg::Variant<Box<dyn arg::RefArg + 'static>>>)>, dbus::Error>;
    fn set_property<I1: arg::Arg + arg::Append>(&self, property: &str, value: I1) -> Result<(), dbus::Error>;
    fn get_properties(&self) -> Result<::std::collections::HashMap<String, arg::Variant<Box<dyn arg::RefArg + 'static>>>, dbus::Error>;
}

impl<'a, C: ::std::ops::Deref<Target=blocking::Connection>> OrgOfonoMmsService for blocking::Proxy<'a, C> {

    fn send_message(&self, recipients: Vec<&str>, smil: &str, attachments: Vec<(&str, &str, &str)>) -> Result<dbus::Path<'static>, dbus::Error> {
        self.method_call("org.ofono.mms.Service", "SendMessage", (recipients, smil, attachments, ))
            .and_then(|r: (dbus::Path<'static>, )| Ok(r.0, ))
    }

    fn get_messages(&self) -> Result<Vec<(dbus::Path<'static>, ::std::collections::HashMap<String, arg::Variant<Box<dyn arg::RefArg + 'static>>>)>, dbus::Error> {
        self.method_call("org.ofono.mms.Service", "GetMessages", ())
            .and_then(|r: (Vec<(dbus::Path<'static>, ::std::collections::HashMap<String, arg::Variant<Box<dyn arg::RefArg + 'static>>>)>, )| Ok(r.0, ))
    }

    fn get_conversation(&self, number: &str, count: &str) -> Result<Vec<(dbus::Path<'static>, ::std::collections::HashMap<String, arg::Variant<Box<dyn arg::RefArg + 'static>>>)>, dbus::Error> {
        self.method_call("org.ofono.mms.Service", "GetConversation", (number, count, ))
            .and_then(|r: (Vec<(dbus::Path<'static>, ::std::collections::HashMap<String, arg::Variant<Box<dyn arg::RefArg + 'static>>>)>, )| Ok(r.0, ))
    }

    fn set_property<I1: arg::Arg + arg::Append>(&self, property: &str, value: I1) -> Result<(), dbus::Error> {
        self.method_call("org.ofono.mms.Service", "SetProperty", (property, arg::Variant(value), ))
    }

    fn get_properties(&self) -> Result<::std::collections::HashMap<String, arg::Variant<Box<dyn arg::RefArg + 'static>>>, dbus::Error> {
        self.method_call("org.ofono.mms.Service", "GetProperties", ())
            .and_then(|r: (::std::collections::HashMap<String, arg::Variant<Box<dyn arg::RefArg + 'static>>>, )| Ok(r.0, ))
    }
}

#[derive(Debug)]
pub struct OrgOfonoMmsServiceMessageAdded {
    pub path: dbus::Path<'static>,
    pub properties: ::std::collections::HashMap<String, arg::Variant<Box<dyn arg::RefArg + 'static>>>,
}

impl arg::AppendAll for OrgOfonoMmsServiceMessageAdded {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.path, i);
        arg::RefArg::append(&self.properties, i);
    }
}

impl arg::ReadAll for OrgOfonoMmsServiceMessageAdded {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(OrgOfonoMmsServiceMessageAdded {
            path: i.read()?,
            properties: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for OrgOfonoMmsServiceMessageAdded {
    const NAME: &'static str = "MessageAdded";
    const INTERFACE: &'static str = "org.ofono.mms.Service";
}

#[derive(Debug)]
pub struct OrgOfonoMmsServiceMessageRemoved {
    pub path: dbus::Path<'static>,
}

impl arg::AppendAll for OrgOfonoMmsServiceMessageRemoved {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.path, i);
    }
}

impl arg::ReadAll for OrgOfonoMmsServiceMessageRemoved {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(OrgOfonoMmsServiceMessageRemoved {
            path: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for OrgOfonoMmsServiceMessageRemoved {
    const NAME: &'static str = "MessageRemoved";
    const INTERFACE: &'static str = "org.ofono.mms.Service";
}
